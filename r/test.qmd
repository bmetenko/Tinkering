---
title: "Quarto Basics"
format:
  html:
    code-fold: true
jupyter: python3
engine: knitr
---

For a demonstration of a line plot on a polar axis, see @fig-polar.

```{python}
#| label: fig-polar
#| fig-cap: "A line plot on a polar axis"

import numpy as np
import matplotlib.pyplot as plt

r = np.arange(0, 2, 0.01)
theta = 2 * np.pi * r
fig, ax = plt.subplots(
  subplot_kw = {'projection': 'polar'} 
)
ax.plot(theta, r)
ax.set_rticks([0.5, 1, 1.5, 2])
ax.grid(True)
plt.show()
```

## Annotation

@fig-polar is just a simple polar plot run using python and matplotlib.
@fig-iris is just a simple bar and scatter plot of iris data using R and ggplot2.


```{r}
#| label: fig-iris
#| fig-cap: Iris dataset preview.
#| code-fold: show

library(datasets)
library(ggplot2)

ggplot(datasets::iris) +
geom_point(aes(x=`Sepal.Length`, y=`Petal.Length`, color=`Species`)) +
geom_histogram(aes(x=`Sepal.Length`, color=`Species`), show.legend = F, bins=150, position='dodge')

```

```{r}
library(gganimate)
df = airquality
mean_temp = mean(df$Temp)

p <- ggplot(
  df,
  aes(Day, Temp, group = Month, color = factor(Month))
  ) +
  geom_line() +
  geom_point(aes(size=Temp/mean_temp * 2), show.legend = FALSE) +
  labs(x = "Day of Month", y = "Temperature") + 
  theme_minimal() +
  theme(legend.position = "bottom") 
p + transition_reveal(Day)

```

# Run Notebook (VS Code)
Prereg: Virtual environment with matplotlib im terminal tab.

`quarto preview file_path_to_test.qmd --no-browser --no-watch-inputs`

or 

`Cmd-Shift-P` + `Quarto: Render`


### Note
`gganimate` may need command line tools on mac: $`xcode-select --install` and also `gifski` R package (note this may compile using rust).  

### Test LaTeX

\begin{align}

\tan{a} &= \frac{\sin{a}}{\cos{a}} \\

\left(\iint_{0}^{n} f(x)f(t)\,dx\,dt \right) &= g(x)

\end{align}

<div style="display: flex; justify-content: space-between;">
<svg>
<circle class="modify0" style="fill: #053210" stroke="yellow" cx=50 cy=50 r=40></circle>
</svg>

<svg>
<circle class="modify1" style="fill: #053210" stroke="yellow" cx=50 cy=50 r=40></circle>
</svg>

<svg>
<circle class="modify2" style="fill: #053210" stroke="yellow" cx=50 cy=50 r=40></circle>
</svg>
</div>

```{ojs}
d3 = require("d3@7")

d3
.select(".modify0")
.style("stroke-width", 8)

d3
.select(".modify1")
.style("fill", "#00FF22")

d3
.select(".modify2")
.style("stroke", "#00F022")
.style("stroke-width", 8)

```