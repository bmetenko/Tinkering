---
title: "Quarto Basics"
format:
  html:
    code-fold: true
jupyter: python3
engine: knitr
---

For a demonstration of a line plot on a polar axis, see @fig-polar.

```{python}
#| label: fig-polar
#| fig-cap: "A line plot on a polar axis"

import numpy as np
import matplotlib.pyplot as plt

r = np.arange(0, 2, 0.01)
theta = 2 * np.pi * r
fig, ax = plt.subplots(
  subplot_kw = {'projection': 'polar'} 
)
ax.plot(theta, r)
ax.set_rticks([0.5, 1, 1.5, 2])
ax.grid(True)
plt.show()
```


```{mermaid}
classDiagram
  Car <|-- Truck
  Car <|-- SUV

  class Car {
    + make: str
    + model: str
    + cyl: int
    + transmission: str
    + honk()
  }

  class Truck {
    + bed: bool
    + extra_wheel_sets: int
    + trailer: bool
  }

  class SUV {
    + extra_seats_row: bool
  }

```

## Annotation

@fig-polar is just a simple polar plot run using python and matplotlib.
@fig-iris is just a simple bar and scatter plot of iris data using R and ggplot2.


```{r}
#| label: fig-iris
#| fig-cap: Iris dataset preview.
#| code-fold: show

library(datasets)
library(ggplot2)

ggplot(datasets::iris) +
geom_point(aes(x=`Sepal.Length`, y=`Petal.Length`, color=`Species`)) +
geom_histogram(aes(x=`Sepal.Length`, color=`Species`), show.legend = F, bins=150, position='dodge')

```

```{r}
library(gganimate)
df = airquality
mean_temp = mean(df$Temp)

p <- ggplot(
  df,
  aes(Day, Temp, group = Month, color = factor(Month))
  ) +
  geom_line() +
  geom_point(aes(size=Temp/mean_temp * 2), show.legend = FALSE) +
  labs(x = "Day of Month", y = "Temperature") + 
  theme_minimal() +
  theme(legend.position = "bottom") 
p + transition_reveal(Day)

```

::: {layout-ncol=2}

# Run Notebook (VS Code)
Prereg: Virtual environment with matplotlib in terminal tab.
`quarto preview file_path_to_test.qmd --no-browser --no-watch-inputs`
or 
`Cmd-Shift-P` + `Quarto: Render`

# Note
`gganimate` may need command line tools on mac: $`xcode-select --install` and also `gifski` R package (note this may compile using rust).  
 
:::

### Test LaTeX

\begin{align}

\tan{a} &= \frac{\sin{a}}{\cos{a}} \\

\left(\iint_{0}^{n} f(x)f(t)\,dx\,dt \right) &= g(x)

\end{align}

### Test svg and D3 

<div style="display: flex; justify-content: space-between;">
<svg>
<circle class="modify0" style="fill: #053210" stroke="yellow" cx=50 cy=50 r=40></circle>
</svg>

<svg>
<circle class="modify1" style="fill: #053210" stroke="yellow" cx=50 cy=50 r=40></circle>
</svg>

<svg>
<circle class="modify2" style="fill: #053210" stroke="yellow" cx=50 cy=50 r=40></circle>
</svg>
</div>

<svg class="modify_sep0">
</svg>

```{ojs, echo=FALSE}
d3 = require("d3@7");

d3
.select(".modify0")
.style("stroke-width", 8);

d3
.select(".modify1")
.style("fill", "#00FF22");

d3
.select(".modify2")
.style("stroke", "#00F022")
.style("stroke-width", 8);

```

```{ojs, echo=FALSE}
d3
.select(".modify_sep0")
.append("circle")
.attr("cx", 10)
.attr("cy", 10)
.attr("r", 30)
.style("fill", "red");

d3
.select(".modify_sep0")
.append("circle")
.attr("cx", 100)
.attr("cy", 100)
.attr("r", 30)
.style("fill", "red");

d3
.select(".modify_sep0")
.append("circle")
.attr("cx", 150)
.attr("cy", 150)
.attr("r", 50)
.style("fill", "red");

d3
.select(".modify_sep0")
.append("circle")
.attr("cx", 200)
.attr("cy", 100)
.attr("r", 30)
.style("fill", "red");
```

```{ojs}
svg = d3
.select(".modify_sep0");

x = d3.scaleLinear().domain([0, 100]).range([0, 400]);

svg.call(d3.axisBottom(x));

svg
.transition()
.duration(2000)
.attr("width", "1000")
.duration(200)
.attr("height", "500")

```


```{julia}
#| label: Julia-Fig-Parametric
#| fig-cap: "Julia Parametric Figure"

using Plots

# Data Init
xs = range(0, π, length = 21)
xdata = [
  sin.(xs) cos.(xs) 2sin.(xs)
]

xlabels = [
  "sinx" "cosx" "2sinx"
]

xshapes = [
  :circle,
  :star,
  :square,
]

xcolors = [
  :green
  :red
  :blue
]

plot(
  xs,
  xdata,
  label = xlabels,
  shape = xshapes,
  color = xcolors,
  markersize = 10,
  xaxis = (
    "x-axis label",
    (0, π),
    0:π/2:π,
    font(10, "Courier New")
  ),
  markerstrokecolor=:yellow,
  markerstrokewidth=3,
  background_color=:pink
)

plot!(
  xs,
  tan.(xs) ./ (1.6 * 10^16),
  label="tanx",
  color=:red,
  markersize=3,
  shape=:circle,
  marker_stroke_width=2,
  marker_stroke_color=:orange
)
```


Odd structure and update only on interaction with individual element...

Failing attempts at dynamic range form below.

```{ojs}
//| panel: sidebar

viewof example_slider = Inputs.range(
  [0, 5],
  {
    value: 1, 
    step: 1,
    label: "Example Value"
  }
)

example_slider

// [...example_slider]
value_arr = Array(Number(example_slider)).fill(null).map((_, i) => i);
value_arr

inputs_arr = [];
value_arr.forEach(
  function(i){
    inputs_arr.push(
      Inputs.select(
        Array.from({length: i}, (v, w) => w),
        {label: i})
    )
  }
)
viewof inputs = Inputs.form(
  inputs_arr
)

inputs



```

```{ojs}
// | panel: fill
inputs_arr
```
::: {.panel-tabset}

# Tab1

# Tab2